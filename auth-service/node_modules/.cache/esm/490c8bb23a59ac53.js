let User;_3a5‍.x([["registerUser",()=>registerUser],["loginUser",()=>loginUser],["registerUser",()=>registerUser],["loginUser",()=>loginUser]]);_3a5‍.w("../models/User",[["default",["User"],function(v){User=v}]]);

       const registerUser = async (req, res, next) => {
    try {
        const { name, email, password } = req.body;
        //check wether the user existe or not
        let user = await User.findOne({ email });
        if (user) {
            //return res.status(400).json({ message: "User have already registered" })
            throw new Error("User have already registered");
        }

        // creating a new user
        user = await User.create({
            name,
            email,
            password,
        });

        return res.status(201).json({
            _id: user._id,
            avatar: user.avatar,
            name: user.name,
            email: user.email,
            verified: user.verified,
            admin: user.admin,
            token: await user.generateJWT(),
        });
    } catch (error) {
        next(error);
    }
};

       const loginUser = async (req, res, nex) => {
    try {
        const { email, password } = req.body;

        let user = await User.findOne({ email });
        if (!user) {
            throw new Error("Email not fount");
        }

        if (await user.comparePassword(password)) {
            return res.status(201).json({
                _id: user._id,
                avatar: user.avatar,
                name: user.name,
                email: user.email,
                verified: user.verified,
                admin: user.admin,
                token: await user.generateJWT(),
            });

        } else {
            throw new Error("Invalid email or password");
        }

    } catch(error) {
        next(error);
    }
}

